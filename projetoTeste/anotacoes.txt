Atalhos - 
cria projeto - ng new projetoteste
inicializa e abre o navegador - ng serve --open   

Convenções - 
Primeiro import de tudo que é default do Angular, depois os nossos imports

para criar nomes de arquivos componentes
{nome do componente} . component
-> menubar.component.ts

o nome da classe do menu seguindo padrão CamelCase
-> MenubarComponent 

O template segue a mesma regra; o template do componente possui uma url, que precisa
ser o mesmo nome do arquivo .ts, porém sua extensão é .html, claro,
para deixar a identificação muito clara e bem definida. O mesmo 
ocorre com o arquivo .css.

-------------------------------------------------
2.01
-------------------------------------------------
arquivo angular.json
parte de
    "styles": [
        /*aqui carrega o css global que sera usado em todos os componentes*/
    "src/styles.css"
    ],
    "scripts": [
        /*aqui carrega o script global que nao pertence a um componente especifico*/
    ],

Baixa o bootstrap por:
npm install bootstrap@4.1.1

quando terminar de instalar ele é referenciado em package.json em "dependencies": {
os arquivos baixados vao pra dentro da pasta node modules
o baixado tem que ser adicionado no styles do angular.json: 
"./node_modules/bootstrap/dist/css/bootstrap.min.css"
-------------------------------------------------
2.4
O console avisa qual é o erro, o componennte ap-photo não é conhecido como módulo
angular. 

Um módulo é um agrupador de componentes, um módulo angular está para uma classe java assim como 
um componente angular está para atributos de classe java.

por enquanto o app só tem um módulo, que é o app.module.ts 

app.module carrega um componente que é o AppComponent, e no template de AppComponent
foi chamado o componente novo criado.
Preciso declarar em app.module que AppComponent possui PhotoComponent.
-------------------------------------------------
2.5
Ao adicionar a decorator @Input() digo que as variaveis 'description' e 'url'
são Inbound Properties, ou seja, aceitam receber valores na declaração do componente.

Lembrando que se fosse passado [url] na verdade estaria passando para propriedade,
sem o colchete estou passando a string diretamente.
-------------------------------------------------
2.7
app.module - modulo raiz do angular - primeiro carregado pelo angular.
Para o exemplo do componente de photo, a cada novo componente ele precisa 
pertencer a um modulo, e se forem adicionando muitos componentes na raiz,
o modulo raiz vai ficar enorme.
A ideia é criar 'feature Module' - Modulo com componentes relacionados
photos.module.ts será o feature module. 

O novo feature deve ser importado no import de app.module.ts para que possamos
utilizar os componentes criados.

Ainda em photos.module.ts, 
@NgModule declaration possui tudo que o módulo tem, mas para que este componente 
seja visto fora do módulo de photos precisa do 'exports', é aqui que é controlado 
o acesso aos componentes do módulo.


BrowserModule do angular possui recursos do angular para usar no navegador, 
por padrão ele é importado pelo angular cli na aplicação.
-------------------------------------------------
2.9
Diretiva pode mudar o comportamento de um componente já existente. ngFor
é preciso passar o data binding [] [description]  pq se nao ele vai passar a string, e eu 
quero a propriedade.

ngFor é a diretiva angular que já cria a lista e itera sobre ela p nós.
-------------------------------------------------
3.5
Angular possui o HttpClient para se comunicar com serviços externos.

Primeiro adicione HttpClientModule em app.module.ts

depois injete na classe que deseja usar:
        constructor(http: HttpClient){
        }
new HttpClient de angular/common/http  recebe no construtor uma classe abstrata HttpHandler.
-------------------------------------------------
3.7
http.get retorna um observable, um "observável", ao se inscrever no observable, assim que os dados
chegarem ele vai me notificar.

Angular 2+ trabalha com observable que vem do pacote RXJS, mto poderoso pra trabalhar com 
operação assincrona. Recurso mais rico do que o promisse javascript.

quando os dados chegarem o subscribe joga pra função que está dentro dele:

.subscribe(
    function(photos){
        this.photos = photos
    }
)
Mas é melhor usar arrow function
.subscribe(photos => this.photos = photos);


O subscribe recebe dois parametros, o primeiro é o callback de sucesso, o segundo é o de erro.
-------------------------------------------------
3.8
Neste cenário eu tenho 30 componentes, mas apenas em 6 quero que tenha acesso a api de fotos, o 
problema é que a instrução ficará repetida em 6 lugares:
    http
      .get<Object[]>('http://localhost:3000/flavio/photos') //aqui ainda n faz request
      .subscribe(
        photos => this.photos = photos,
        err => console.log(err)
      );
Este trabalho de acesso em api fica isolado em classes de serviços.

Ao colocar public ou private na variavel do construturo o TS entende 
que essa variável agora é da classe
- constructor(public http: HttpClient) { 


Ao criar um serviço é preciso do decorator @Injectable, este decorator diz que
o service é injetável.
@Injectable({providedIn:'root'})  root diz que será um service raiz, ou seja,
qualquer componente da aplicação poderá ver A MESMA INSTANCIA deste service.
-------------------------------------------------
3.9
Para fazer o refactor rename da propriedade e alterar em todo o app, clica
com o botão direito sobre o nome, 'rename symbol', escreve e aperta enter
-------------------------------------------------
3.10
Ate o momento buscamos as fotos no constructor da classe AppComponent,
na construção de um componente, primeiro o angular cria uma instancia de
appComponent, depois aplica o decorator @Component pra de fato tornar a 
instância um componente.

Nessa nova organização, constructor serve apenas para injeção de dependência.
Qualquer lógica que precisar utilizar, será colocada em uma das fases do 
CICLO DE VIDA do angular. 

Para este cenário o ngOnInit do ciclo de vida será utilizado para fazer a lógica,
de consumo que estava encapsulada no constructor.

O ngOnInit acontece apos a instanciação e após o componente receber as inbound
properties.

Foi movido o module HttpClientModule para o photos module pq a aplicação toda não 
precisa do componente, apenas os componentes de Photos.